# Importing necessary libraries

from pydantic import BaseModel

# Pydantic model representing the structure of client-related data

class ClientData(BaseModel):
    clientEmail: str  # The email address of the client
    clientName: str   # The name of the client
    clientRole: str   # The role or position of the client in their organization
    phone: str        # The phone number of the client
    address: str      # The physical address of the client
    info: str         # Additional information about the client
    toneOfSpeech: str # The preferred tone of speech for communication with the client
    que: str          # A field for queue or sequence related data (assuming it's a string)

# Pydantic model representing user data, typically for associating a user with a client
    
class UserData(BaseModel):
    user: str   # The username or identifier for the user
    client: str # The associated client email or identifier

# Pydantic model used for setting up a conversation, linking a user with a client
    
class ConversationSetupData(BaseModel):
    user_id: str  # The ID of the user
    client: str   # The associated client email or identifier

# Pydantic model for chat responses, encapsulating the response text
    
class ChatResponse(BaseModel):
    response: str # The text response generated by the chat system (cBot)

# Static class to store requirements

class Static:
    requirements = ''
